import asyncio
import random
import aiohttp
from .. import loader, utils
from telethon import errors


@loader.tds
class AutoSpamOnlineMod(loader.Module):
    """–ê–≤—Ç–æ—Å–ø–∞–º —Å —Ñ—Ä–∞–∑–∞–º–∏ –∏–∑ –æ–±–ª–∞—á–Ω–æ–≥–æ TXT —Ñ–∞–π–ª–∞ (GitHub, raw)"""

    strings = {
        "name": "AutoSpamOnline",
        "spam_started": "üöÄ <b>–µ–±–ª—è –∑–∞–ø—É—â–µ–Ω–∞!</b>",
        "spam_stopped": "‚õî <b>–µ–±–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞</b>",
        "error_download": "‚ùå <b>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ—Ä–∞–∑:</b> <code>{}</code>",
        "error_no_messages": "‚ùå <b>–í —É–¥–∞–ª—ë–Ω–Ω–æ–º —Ñ–∞–π–ª–µ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π!</b>",
        "already_running": "‚ö†Ô∏è <b>–µ–±–ª—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞</b>",
        "not_running": "‚ùå <b>–µ–±–ª—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞</b>"
    }

    def __init__(self):
        self.spam_active = False
        # üìù –°—é–¥–∞ —É–∫–∞–∂–∏ —Å—Å—ã–ª–∫—É –Ω–∞ RAW TXT —Ñ–∞–π–ª (–∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
        self.url = "https://raw.githubusercontent.com/saltviper3333/gdfsfdsfdsf/main/messages.txt"

    async def get_messages(self):
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ TXT –∏ –ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(self.url) as response:
                    if response.status == 200:
                        text_data = await response.text()
                        # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º –∏ —É–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ
                        return [line.strip() for line in text_data.splitlines() if line.strip()]
                    else:
                        return None
        except Exception as e:
            return str(e)

    @loader.command()
    async def sex(self, message):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –µ–±–ª—é (–æ–Ω–ª–∞–π–Ω-—Å–ø–∞–º)"""
        if self.spam_active:
            await utils.answer(message, self.strings["already_running"])
            return

        phrases = await self.get_messages()

        if phrases is None:
            await utils.answer(message, self.strings["error_download"].format("HTTP error"))
            return
        if isinstance(phrases, str):
            await utils.answer(message, self.strings["error_download"].format(phrases))
            return
        if not phrases:
            await utils.answer(message, self.strings["error_no_messages"])
            return

        self.spam_active = True
        await utils.answer(message, self.strings["spam_started"])

        try:
            while self.spam_active:
                text = random.choice(phrases)
                try:
                    await message.client.send_message(message.chat_id, text)
                    await asyncio.sleep(random.uniform(0.08, 0.5))  # üîπ –∑–∞–¥–µ—Ä–∂–∫–∞ 0.08‚Äì0.5 —Å–µ–∫
                except errors.FloodWaitError as e:
                    await asyncio.sleep(e.seconds)
                except Exception:
                    break
        finally:
            self.spam_active = False

    @loader.command()
    async def s(self, message):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–±–ª—é"""
        if self.spam_active:
            self.spam_active = False
            await utils.answer(message, self.strings["spam_stopped"])
        else:
            await utils.answer(message, self.strings["not_running"])
