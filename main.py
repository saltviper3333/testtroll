# meta developer: @byebyeskype
# scope: hikka_only

import asyncio
import random
import aiohttp
from .. import loader, utils
from telethon import errors

@loader.tds
class AutoSpamOnlineMod(loader.Module):
    """–ê–≤—Ç–æ—Å–ø–∞–º –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ (.txt) –Ω–∞ GitHub —Å —á–µ—Ä–µ–¥—É—é—â–µ–π—Å—è –∑–∞–¥–µ—Ä–∂–∫–æ–π"""

    strings = {
        "name": "AutoSpamOnline",
        "spam_started": "üöÄ <b>–µ–±–ª—è –∑–∞–ø—É—â–µ–Ω–∞!</b>",
        "spam_stopped": "‚õî <b>–µ–±–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞</b>",
        "error_download": "‚ùå <b>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ—Ä–∞–∑:</b> <code>{}</code>",
        "error_no_messages": "‚ùå <b>–í —É–¥–∞–ª—ë–Ω–Ω–æ–º —Ñ–∞–π–ª–µ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π!</b>",
        "already_running": "‚ö†Ô∏è <b>–µ–±–ª—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞</b>",
        "not_running": "‚ùå <b>–µ–±–ª—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞</b>"
    }

    def __init__(self):
        self.spam_active = False
        # üí° –°—é–¥–∞ –≤—Å—Ç–∞–≤—å —Å–≤–æ–π RAW-URL –∫ messages.txt
        self.url = "https://raw.githubusercontent.com/saltviper3333/gdfsfdsfdsf/main/messages.txt"

    async def get_messages(self):
        """–°–∫–∞—á–∞—Ç—å TXT-—Ñ–∞–π–ª –∏ –≤–µ—Ä–Ω—É—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(self.url) as response:
                    if response.status == 200:
                        text_data = await response.text()
                        lines = [line.strip() for line in text_data.splitlines() if line.strip()]
                        return lines
                    else:
                        return None
        except Exception as e:
            return str(e)

    @loader.command()
    async def sex(self, message):
        """–ù–∞—á–∞—Ç—å –æ–Ω–ª–∞–π–Ω-—Å–ø–∞–º"""
        if self.spam_active:
            await utils.answer(message, self.strings["already_running"])
            return

        phrases = await self.get_messages()

        if phrases is None:
            await utils.answer(message, self.strings["error_download"].format("HTTP error"))
            return
        if isinstance(phrases, str):
            await utils.answer(message, self.strings["error_download"].format(phrases))
            return
        if not phrases:
            await utils.answer(message, self.strings["error_no_messages"])
            return

        self.spam_active = True
        await utils.answer(message, self.strings["spam_started"])

        delay_cycle = [0.10, 0.5]  # "–∫–∞—á–∞–ª–∫–∞" –∑–∞–¥–µ—Ä–∂–µ–∫
        delay_index = 0

        try:
            while self.spam_active:
                text = random.choice(phrases)
                try:
                    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                    await message.client.send_message(message.chat_id, text)
                    # –ß–µ—Ä–µ–¥—É–µ–º –∑–∞–¥–µ—Ä–∂–∫–∏
                    await asyncio.sleep(delay_cycle[delay_index])
                    delay_index = (delay_index + 1) % len(delay_cycle)
                except errors.FloodWaitError as e:
                    await utils.answer(message, f"üö´ FloodWait {e.seconds} —Å–µ–∫")
                    await asyncio.sleep(e.seconds)
                except Exception:
                    break
        finally:
            self.spam_active = False

    @loader.command()
    async def s(self, message):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–ø–∞–º"""
        if self.spam_active:
            self.spam_active = False
            await utils.answer(message, self.strings["spam_stopped"])
        else:
            await utils.answer(message, self.strings["not_running"])
