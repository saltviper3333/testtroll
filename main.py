import asyncio
import random
import aiohttp
from .. import loader, utils
from telethon import errors


@loader.tds
class AutoSpamOnlineMod(loader.Module):
    """–ê–≤—Ç–æ—Å–ø–∞–º + –∞–≤—Ç–æ–±–∞–π—Ç (.q / .qq / .qwe)"""

    strings = {
        "name": "AutoSpamOnline",
        "spam_started": "üöÄ <b>–µ–±–ª—è –∑–∞–ø—É—â–µ–Ω–∞!</b>",
        "spam_stopped": "‚õî <b>–µ–±–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞</b>",
        "error_download": "‚ùå <b>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ—Ä–∞–∑:</b> <code>{}</code>",
        "error_no_messages": "‚ùå <b>–í —É–¥–∞–ª—ë–Ω–Ω–æ–º —Ñ–∞–π–ª–µ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π!</b>",
        "already_running": "‚ö†Ô∏è <b>–µ–±–ª—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞</b>",
        "not_running": "‚ùå <b>–µ–±–ª—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞</b>",
        "q_no_reply": "‚ö†Ô∏è <b>–ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!</b>",
        "q_added": "‚úÖ <b>–ë–∞–π—Ç –≤–∫–ª—é—á—ë–Ω –Ω–∞ {}</b>",
        "qq_done": "üóë <b>–í—Å–µ –±–∞–π—Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã</b>",
        "qwe_header": "üìú <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –±–∞–π—Ç—ã:</b>\n"
    }

    def __init__(self):
        self.spam_active = False
        # {chat_id: set(user_ids)}
        self.q_targets = {}
        self.url = "https://raw.githubusercontent.com/saltviper3333/gdfsfdsfdsf/main/messages.txt"

    async def get_messages(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º TXT-—à–∞–±–ª–æ–Ω"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(self.url) as response:
                    if response.status == 200:
                        data = await response.text()
                        return [line.strip() for line in data.splitlines() if line.strip()]
                    else:
                        return None
        except Exception as e:
            return str(e)

    # üîπ –ì–ª–∞–≤–Ω—ã–π —Å–ø–∞–º-—Ü–∏–∫–ª
    @loader.command()
    async def sex(self, message):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –µ–±–ª—é (–æ–Ω–ª–∞–π–Ω-—Å–ø–∞–º)"""
        if self.spam_active:
            return await utils.answer(message, self.strings["already_running"])

        phrases = await self.get_messages()
        if not phrases or isinstance(phrases, str):
            return await utils.answer(message, self.strings["error_no_messages"])

        self.spam_active = True
        await utils.answer(message, self.strings["spam_started"])

        try:
            while self.spam_active:
                await message.client.send_message(message.chat_id, random.choice(phrases))
                await asyncio.sleep(random.uniform(0.08, 0.5))
        except errors.FloodWaitError as e:
            await asyncio.sleep(e.seconds)
        finally:
            self.spam_active = False

    @loader.command()
    async def s(self, message):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–±–ª—é"""
        if self.spam_active:
            self.spam_active = False
            await utils.answer(message, self.strings["spam_stopped"])
        else:
            await utils.answer(message, self.strings["not_running"])

    # üîπ –°—Ç–∞–≤–∏–º –∞–≤—Ç–æ-–±–∞–π—Ç–∏–Ω–≥
    @loader.command()
    async def q(self, message):
        """–û—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –≤–∫–ª—é—á–∏—Ç—å –±–∞–π—Ç–∏–Ω–≥ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not message.is_reply:
            return await utils.answer(message, self.strings["q_no_reply"])

        reply_msg = await message.get_reply_message()
        target_id = reply_msg.sender_id
        chat_id = message.chat_id

        self.q_targets.setdefault(chat_id, set()).add(target_id)

        # –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ —É–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
        await message.delete()

        user_name = utils.get_display_name(reply_msg.sender)
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–æ–∂–Ω–æ –æ–ø—É—Å—Ç–∏—Ç—å, –Ω–æ –≤—Å—Ç–∞–≤–ª—é –¥–ª—è –ª–æ–≥–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å
        await utils.answer(reply_msg, self.strings["q_added"].format(user_name))

    # üîπ –û—á–∏—â–∞–µ–º –≤—Å–µ —Ü–µ–ª–∏
    @loader.command()
    async def qq(self, message):
        """–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –±–∞–π—Ç—ã"""
        self.q_targets.clear()
        await utils.answer(message, self.strings["qq_done"])

    # üîπ –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫
    @loader.command()
    async def qwe(self, message):
        """–í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∞–π—Ç–∏–Ω–≥–æ–≤"""
        if not self.q_targets:
            return await utils.answer(message, "‚ùå <b>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∞–π—Ç–æ–≤</b>")

        out = self.strings["qwe_header"]
        for chat_id, users in self.q_targets.items():
            try:
                chat_title = (await message.client.get_entity(chat_id)).title
            except:
                chat_title = str(chat_id)
            out += f"\n<b>{chat_title}</b>:\n"
            for uid in users:
                try:
                    name = utils.get_display_name(await message.client.get_entity(uid))
                except:
                    name = str(uid)
                out += f"  ‚ï∞ üí¨ {name}\n"
        await utils.answer(message, out)

    # üîπ –°–ª–µ–∂–∫–∞ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    async def watcher(self, message):
        if not getattr(message, "sender_id", None):
            return
        chat_id = message.chat_id
        user_id = message.sender_id

        if chat_id in self.q_targets and user_id in self.q_targets[chat_id]:
            phrases = await self.get_messages()
            if not phrases or isinstance(phrases, str):
                return
            try:
                await message.reply(random.choice(phrases))
            except errors.FloodWaitError as e:
                await asyncio.sleep(e.seconds)
                await message.reply(random.choice(phrases))
